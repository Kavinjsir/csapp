Dump of assembler code for function main:
bomb.c:
37	{
   0x0000000000400da0 <+0>:	53	push   %rbx

38	    char *input;
39	
40	    /* Note to self: remember to port this bomb to Windows and put a 
41	     * fantastic GUI on it. */
42	
43	    /* When run with no arguments, the bomb reads its input lines 
44	     * from standard input. */
45	    if (argc == 1) {  
   0x0000000000400da1 <+1>:	83 ff 01	cmp    $0x1,%edi
   0x0000000000400da4 <+4>:	75 10	jne    0x400db6 <main+22>

46		infile = stdin;
   0x0000000000400da6 <+6>:	48 8b 05 9b 29 20 00	mov    0x20299b(%rip),%rax        # 0x603748 <stdin@@GLIBC_2.2.5>
   0x0000000000400dad <+13>:	48 89 05 b4 29 20 00	mov    %rax,0x2029b4(%rip)        # 0x603768 <infile>
   0x0000000000400db4 <+20>:	eb 63	jmp    0x400e19 <main+121>
   0x0000000000400db6 <+22>:	48 89 f3	mov    %rsi,%rbx

47	    } 
48	
49	    /* When run with one argument <file>, the bomb reads from <file> 
50	     * until EOF, and then switches to standard input. Thus, as you 
51	     * defuse each phase, you can add its defusing string to <file> and
52	     * avoid having to retype it. */
53	    else if (argc == 2) {
   0x0000000000400db9 <+25>:	83 ff 02	cmp    $0x2,%edi
   0x0000000000400dbc <+28>:	75 3a	jne    0x400df8 <main+88>

54		if (!(infile = fopen(argv[1], "r"))) {
   0x0000000000400dbe <+30>:	48 8b 7e 08	mov    0x8(%rsi),%rdi
   0x0000000000400dc2 <+34>:	be b4 22 40 00	mov    $0x4022b4,%esi
   0x0000000000400dc7 <+39>:	e8 44 fe ff ff	callq  0x400c10 <fopen@plt>
   0x0000000000400dcc <+44>:	48 89 05 95 29 20 00	mov    %rax,0x202995(%rip)        # 0x603768 <infile>
   0x0000000000400dd3 <+51>:	48 85 c0	test   %rax,%rax
   0x0000000000400dd6 <+54>:	75 41	jne    0x400e19 <main+121>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400dd8 <+56>:	48 8b 4b 08	mov    0x8(%rbx),%rcx
   0x0000000000400ddc <+60>:	48 8b 13	mov    (%rbx),%rdx
   0x0000000000400ddf <+63>:	be b6 22 40 00	mov    $0x4022b6,%esi
   0x0000000000400de4 <+68>:	bf 01 00 00 00	mov    $0x1,%edi
   0x0000000000400de9 <+73>:	e8 12 fe ff ff	callq  0x400c00 <__printf_chk@plt>

bomb.c:
56		    exit(8);
   0x0000000000400dee <+78>:	bf 08 00 00 00	mov    $0x8,%edi
   0x0000000000400df3 <+83>:	e8 28 fe ff ff	callq  0x400c20 <exit@plt>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400df8 <+88>:	48 8b 16	mov    (%rsi),%rdx
   0x0000000000400dfb <+91>:	be d3 22 40 00	mov    $0x4022d3,%esi
   0x0000000000400e00 <+96>:	bf 01 00 00 00	mov    $0x1,%edi
   0x0000000000400e05 <+101>:	b8 00 00 00 00	mov    $0x0,%eax
   0x0000000000400e0a <+106>:	e8 f1 fd ff ff	callq  0x400c00 <__printf_chk@plt>

bomb.c:
63		exit(8);
   0x0000000000400e0f <+111>:	bf 08 00 00 00	mov    $0x8,%edi
   0x0000000000400e14 <+116>:	e8 07 fe ff ff	callq  0x400c20 <exit@plt>

64	    }
65	
66	    /* Do all sorts of secret stuff that makes the bomb harder to defuse. */
67	    initialize_bomb();
   0x0000000000400e19 <+121>:	e8 84 05 00 00	callq  0x4013a2 <initialize_bomb>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400e1e <+126>:	bf 38 23 40 00	mov    $0x402338,%edi
   0x0000000000400e23 <+131>:	e8 e8 fc ff ff	callq  0x400b10 <puts@plt>
   0x0000000000400e28 <+136>:	bf 78 23 40 00	mov    $0x402378,%edi
   0x0000000000400e2d <+141>:	e8 de fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
73	    input = read_line();             /* Get input                   */
   0x0000000000400e32 <+146>:	e8 67 06 00 00	callq  0x40149e <read_line>

74	    phase_1(input);                  /* Run the phase               */
   0x0000000000400e37 <+151>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400e3a <+154>:	e8 a1 00 00 00	callq  0x400ee0 <phase_1>

75	    phase_defused();                 /* Drat!  They figured it out!
   0x0000000000400e3f <+159>:	e8 80 07 00 00	callq  0x4015c4 <phase_defused>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400e44 <+164>:	bf a8 23 40 00	mov    $0x4023a8,%edi
   0x0000000000400e49 <+169>:	e8 c2 fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
81	    input = read_line();
   0x0000000000400e4e <+174>:	e8 4b 06 00 00	callq  0x40149e <read_line>

82	    phase_2(input);
   0x0000000000400e53 <+179>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400e56 <+182>:	e8 a1 00 00 00	callq  0x400efc <phase_2>

83	    phase_defused();
   0x0000000000400e5b <+187>:	e8 64 07 00 00	callq  0x4015c4 <phase_defused>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400e60 <+192>:	bf ed 22 40 00	mov    $0x4022ed,%edi
   0x0000000000400e65 <+197>:	e8 a6 fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
88	    input = read_line();
   0x0000000000400e6a <+202>:	e8 2f 06 00 00	callq  0x40149e <read_line>

89	    phase_3(input);
   0x0000000000400e6f <+207>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400e72 <+210>:	e8 cc 00 00 00	callq  0x400f43 <phase_3>

90	    phase_defused();
   0x0000000000400e77 <+215>:	e8 48 07 00 00	callq  0x4015c4 <phase_defused>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400e7c <+220>:	bf 0b 23 40 00	mov    $0x40230b,%edi
   0x0000000000400e81 <+225>:	e8 8a fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
94	    input = read_line();
   0x0000000000400e86 <+230>:	e8 13 06 00 00	callq  0x40149e <read_line>

95	    phase_4(input);
   0x0000000000400e8b <+235>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400e8e <+238>:	e8 79 01 00 00	callq  0x40100c <phase_4>

96	    phase_defused();
   0x0000000000400e93 <+243>:	e8 2c 07 00 00	callq  0x4015c4 <phase_defused>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400e98 <+248>:	bf d8 23 40 00	mov    $0x4023d8,%edi
   0x0000000000400e9d <+253>:	e8 6e fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
100	    input = read_line();
   0x0000000000400ea2 <+258>:	e8 f7 05 00 00	callq  0x40149e <read_line>

101	    phase_5(input);
   0x0000000000400ea7 <+263>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400eaa <+266>:	e8 b3 01 00 00	callq  0x401062 <phase_5>

102	    phase_defused();
   0x0000000000400eaf <+271>:	e8 10 07 00 00	callq  0x4015c4 <phase_defused>

/usr/include/x86_64-linux-gnu/bits/stdio2.h:
105	printf (const char *__restrict __fmt, ...)
   0x0000000000400eb4 <+276>:	bf 1a 23 40 00	mov    $0x40231a,%edi
   0x0000000000400eb9 <+281>:	e8 52 fc ff ff	callq  0x400b10 <puts@plt>

bomb.c:
107	    input = read_line();
   0x0000000000400ebe <+286>:	e8 db 05 00 00	callq  0x40149e <read_line>

108	    phase_6(input);
   0x0000000000400ec3 <+291>:	48 89 c7	mov    %rax,%rdi
   0x0000000000400ec6 <+294>:	e8 29 02 00 00	callq  0x4010f4 <phase_6>

109	    phase_defused();
   0x0000000000400ecb <+299>:	e8 f4 06 00 00	callq  0x4015c4 <phase_defused>

110	
111	    /* Wow, they got it!  But isn't something... missing?  Perhaps
112	     * something they overlooked?  Mua ha ha ha ha! */
113	    
114	    return 0;
115	}
   0x0000000000400ed0 <+304>:	b8 00 00 00 00	mov    $0x0,%eax
   0x0000000000400ed5 <+309>:	5b	pop    %rbx
   0x0000000000400ed6 <+310>:	c3	retq   
End of assembler dump.
